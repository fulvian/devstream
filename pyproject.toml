[tool.poetry]
name = "devstream"
version = "0.1.0"
description = "Sistema Integrato Task Management & Memoria Cross-Session per Claude Code"
authors = ["Claude AI Assistant <noreply@anthropic.com>"]
readme = "README.md"
packages = [{include = "devstream", from = "src"}]
license = "MIT"
repository = "https://github.com/your-org/devstream"
documentation = "https://devstream.readthedocs.io"
keywords = ["ai", "task-management", "memory", "claude-code", "sqlite", "ollama"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = "^3.11"

# Core dependencies - Always installed
aiosqlite = "^0.19.0"                # Async SQLite client
sqlalchemy = {extras = ["asyncio"], version = "^2.0.0"}  # SQL toolkit with async support
greenlet = "^3.0.0"                  # Required for SQLAlchemy async
pydantic = "^2.5.0"                  # Data validation
pydantic-settings = "^2.1.0"         # Settings management
httpx = "^0.27.0"                    # Async HTTP client for Ollama
ollama = "^0.6.0"                    # Ollama Python client
typer = {extras = ["all"], version = "^0.9.0"}  # CLI framework
rich = "^13.7.0"                     # Terminal formatting
click = "^8.1.0"                     # CLI foundation

# Configuration and environment
python-dotenv = "^1.0.0"             # Environment variables
PyYAML = "^6.0"                      # YAML configuration

# Data processing and utilities
numpy = "^1.24.0"                    # Vector operations
orjson = "^3.9.0"                    # Fast JSON processing
structlog = "^23.2.0"                # Structured logging
pybreaker = "^1.0.0"                 # Circuit breaker pattern (Context7-validated)

# Optional dependencies for advanced features
sqlite-vss = {version = "^0.1.2", optional = true}  # Vector similarity search

[tool.poetry.group.dev.dependencies]
# Testing framework
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-mock = "^3.12.0"
pytest-cov = "^4.1.0"
pytest-xdist = "^3.5.0"             # Parallel testing
pytest-benchmark = "^4.0.0"         # Performance benchmarking
pytest-httpx = "^0.30.0"            # HTTP mocking for async httpx (Context7-validated)
uvloop = "^0.19.0"                   # High-performance event loop for testing (Context7-validated)

# Code quality and formatting
black = "^23.12.0"                   # Code formatter
isort = "^5.13.0"                    # Import sorter
ruff = "^0.1.0"                      # Fast linter
mypy = "^1.8.0"                      # Type checker

# Development tools
pre-commit = "^3.6.0"               # Git hooks
commitizen = "^3.13.0"              # Conventional commits

# Documentation
mkdocs = "^1.5.0"
mkdocs-material = "^9.5.0"
mkdocstrings = "^0.24.0"

[tool.poetry.group.test.dependencies]
# Integration testing with real services
docker = "^7.0.0"
testcontainers = "^3.7.0"
httpx-ws = "^0.5.0"                  # WebSocket testing
fakeredis = "^2.20.0"               # Redis mocking
freezegun = "^1.4.0"                # Time mocking

[tool.poetry.group.performance.dependencies]
# Performance monitoring and profiling
memory-profiler = "^0.61.0"
line-profiler = "^4.1.0"
py-spy = "^0.3.0"

# Optional extras for different deployment scenarios
[tool.poetry.extras]
vector = ["sqlite-vss"]              # Vector search capabilities
all = ["sqlite-vss"]                 # All optional features

# CLI entry points
[tool.poetry.scripts]
devstream = "devstream.cli.main:app"
devstream-migrate = "devstream.database.migrations:migrate_cli"
devstream-benchmark = "devstream.cli.benchmark:benchmark_cli"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# ============================================================================
# TOOL CONFIGURATIONS
# ============================================================================

[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
implicit_reexport = false
strict_equality = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "sqlite_vss.*",
    "testcontainers.*",
    "docker.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "--cov=devstream",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "memory: marks tests as memory system tests",
    "database: marks tests as database tests",
    "performance: marks tests as performance tests",
    "error_boundary: marks tests as error boundary and resilience tests",
    "requires_ollama: marks tests that require Ollama server",
    "requires_docker: marks tests that require Docker",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # bandit security
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "ERA", # eradicate commented code
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "S101",   # use of assert
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
]

[tool.ruff.per-file-ignores]
"tests/**" = ["S101", "ARG001", "PLR2004"]
"src/devstream/cli/**" = ["T20"]  # Allow print in CLI

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "src/devstream/cli/*",  # CLI coverage less critical
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "src/devstream/__init__.py:__version__",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]